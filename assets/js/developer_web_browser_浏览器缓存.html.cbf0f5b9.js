"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6039],{6262:(e,o)=>{o.A=(e,o)=>{const i=e.__vccOpts||e;for(const[e,a]of o)i[e]=a;return i}},4317:(e,o,i)=>{i.r(o),i.d(o,{comp:()=>l,data:()=>n});var a=i(641);const t=i.p+"assets/img/maxage1.e8716d17.png",c=i.p+"assets/img/maxage2.7b574e24.png",d={},l=(0,i(6262).A)(d,[["render",function(e,o){return(0,a.uX)(),(0,a.CE)("div",null,o[0]||(o[0]=[(0,a.Fv)('<h1 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存"><span>浏览器缓存</span></a></h1><p>浏览器缓存是浏览器在本地磁盘对用户近期请求过的文档进行存储。在下一次访问同一文档时，就可以直接从本地磁盘中读取。</p><p>其主要过程为：</p><ol><li>浏览器第一次加载资源，服务器返回200，浏览器从服务器下载资源文件，并缓存资源以及response header（响应头信息），以供下次对比使用</li><li>浏览器再次请求资源，由于强制缓存优先级高，浏览器通过强制缓存判断缓存是否命中，命中则直接使用本地缓存。</li><li>强制缓存没有命中则开始判断协商缓存，浏览器会重新发服务器发起请求，携带上判断协商缓存需要的信息给服务器，服务器接收到信息，判断是否命中协商缓存。</li><li>命中协商缓存则返回状态码304，浏览器接收到则使用本地缓存。没有命中服务器直接发送新的资源文件给浏览器。</li></ol><p>这里大家注意到，浏览器缓存分为了两种：<code>强制缓存</code>和<code>协商缓存</code>，下面我们来详细了解以下浏览器与服务器是如何进行这两种缓存判断的</p><h2 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存"><span>强制缓存</span></a></h2><p>强制缓存是利用http响应头中的<code>Expires</code>和<code>Cache-Control</code>两个字段来控制的。</p><p>当浏览器第一次请求资源时，服务器返回资源的同时，在响应头中会返回<code>Expires</code>和<code>Cache-Control</code><br> 字段，这两个字段的作用是告诉浏览器，这个资源在多久之前是有效的，可以直接使用，不需要再次请求。</p><h3 id="expires属性" tabindex="-1"><a class="header-anchor" href="#expires属性"><span>Expires属性</span></a></h3><p><code>Expires</code>属性是http1.0的属性，用来指定资源的过期时间。浏览器再次访问资源时，通过<code>Expires</code><br> 属性判断资源是否在过期时间内，当在过期时间内时，则该资源可以被直接使用。</p><p>但是由于时区等原因，<code>Expires</code>存在一些问题。</p><h3 id="cache-control属性" tabindex="-1"><a class="header-anchor" href="#cache-control属性"><span>Cache-Control属性</span></a></h3><p><code>Cache-Control</code>是http1.1的属性，优先级高于<code>Expires</code>属性，它有多个不同的值，如：</p><ul><li><code>public</code>：所有内容都将被缓存（客户端和代理服务器都可缓存）</li><li><code>private</code>：所有内容只有客户端可以缓存，<code>Cache-Control</code>的默认取值</li><li><code>no-cache</code>：限于服务端确定资源是否发生变化，再决定是否使用缓存，也就是协商缓存</li><li><code>no-store</code>：所有的内容都不会被缓存，即不使用强制缓存也不使用协商缓存</li><li><code>max-age=xxx</code>：<code>xxx</code>为数字，缓存内容将在<code>xxx</code>秒后失效，即在<code>xxx</code>秒内再次发送请求，则会直接使用缓存</li></ul><p>这里我们展示一个<code>Cache-Control</code>的例子：</p><p>设置Cache-Control为<code>max-age=10</code>，表示资源在10秒内有效，即在10秒内再次请求资源，则会直接使用缓存。<br><img src="'+t+'" alt="" class="img-center" loading="lazy"></p><p>之后我们10秒内再次请求，可以看到命中缓存，直接使用本地缓存。<br><img src="'+c+'" alt="" class="img-center" loading="lazy"></p><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h2><p>当命中强制缓存时，浏览器无序向服务器发起请求，直接使用本地缓存。</p><p>而协商缓存则是由浏览器发起请求到服务器，请求头上携带着上次请求的响应头信息，服务器根据请求头信息判断资源是否有更新，如果没有更新则返回304状态码，浏览器直接使用本地缓存。</p><p>协商缓存主要是通过<code>Last-Modified/If-Modified-Since</code>或<code>Etag/If-None-Match</code>来判断资源是否有更新。</p><h3 id="last-modified和if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified和if-modified-since"><span>Last-Modified和If-Modified-Since</span></a></h3><p><code>Last-Modified和If-Modified-Since</code>是通过时间来判断是否有更新的。</p><p>服务器在响应头中添加<code>Last-Modified</code>属性来指出资源的最后一次修改时间，当浏览器下一次发起请求时，会在请求头中添加一个<code>If-Modified-Since</code>的属性，值为上一次资源返回的最后修改时间。当请求发送到服务器中，服务器会对比来判断资源是否修改。</p><h3 id="etag和if-none-match" tabindex="-1"><a class="header-anchor" href="#etag和if-none-match"><span>Etag和If-None-Match</span></a></h3><p><code>Etag和If-None-Match</code>是通过标识来判断资源是否有更新的。</p><p>服务器在响应头中添加<code>Etag</code>属性，这个属性是资源生成时的唯一标识符。当浏览器下一次发起请求时，会在请求头中添加<code>If-None-Match</code>的属性，值为上一次资源返回的Etag。当请求发送到服务器中，服务器对比来判断资源是否修改。</p><h2 id="强制缓存和协商缓存区别" tabindex="-1"><a class="header-anchor" href="#强制缓存和协商缓存区别"><span>强制缓存和协商缓存区别</span></a></h2><ul><li>强制缓存是由浏览器来判断缓存是否生效，一旦命中，不会发起新的请求</li><li>协商缓存是浏览器发起请求，由服务器来判断缓存是否命中缓存，如果命中则返回304，告知浏览器缓存可使用，没命中则会返回新的资源</li></ul><h2 id="点击刷新按钮或者按f5、按ctrl-f5、地址栏回车有什么区别" tabindex="-1"><a class="header-anchor" href="#点击刷新按钮或者按f5、按ctrl-f5、地址栏回车有什么区别"><span>点击刷新按钮或者按F5、按Ctrl+F5、地址栏回车有什么区别</span></a></h2><ul><li>点击刷新、按F5：浏览器直接对本地的缓存文件过期，但是会带上If-Modified-Since，If-None-Match，也就是进行协商缓存</li><li>Ctrl+F5：浏览器直接请求资源，相当于第一次加载页面</li><li>地址栏回车：浏览器发起请求，按照正常流程，强制缓存协商缓存</li></ul><hr>',32)]))}]]),n=JSON.parse('{"path":"/developer/web/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98.html","title":"浏览器缓存","lang":"zh-CN","frontmatter":{"category":["前端"],"tag":["浏览器"],"order":1,"permalink":"/developer/web/browser/浏览器缓存.html","description":"浏览器缓存 浏览器缓存是浏览器在本地磁盘对用户近期请求过的文档进行存储。在下一次访问同一文档时，就可以直接从本地磁盘中读取。 其主要过程为： 浏览器第一次加载资源，服务器返回200，浏览器从服务器下载资源文件，并缓存资源以及response header（响应头信息），以供下次对比使用 浏览器再次请求资源，由于强制缓存优先级高，浏览器通过强制缓存判断缓...","head":[["meta",{"property":"og:url","content":"https://yuchunmao.github.io/blog/developer/web/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"独白"}],["meta",{"property":"og:title","content":"浏览器缓存"}],["meta",{"property":"og:description","content":"浏览器缓存 浏览器缓存是浏览器在本地磁盘对用户近期请求过的文档进行存储。在下一次访问同一文档时，就可以直接从本地磁盘中读取。 其主要过程为： 浏览器第一次加载资源，服务器返回200，浏览器从服务器下载资源文件，并缓存资源以及response header（响应头信息），以供下次对比使用 浏览器再次请求资源，由于强制缓存优先级高，浏览器通过强制缓存判断缓..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T04:27:45.000Z"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:modified_time","content":"2024-12-02T04:27:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器缓存\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-02T04:27:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"独白\\",\\"email\\":\\"758235948@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"强制缓存","slug":"强制缓存","link":"#强制缓存","children":[{"level":3,"title":"Expires属性","slug":"expires属性","link":"#expires属性","children":[]},{"level":3,"title":"Cache-Control属性","slug":"cache-control属性","link":"#cache-control属性","children":[]}]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[{"level":3,"title":"Last-Modified和If-Modified-Since","slug":"last-modified和if-modified-since","link":"#last-modified和if-modified-since","children":[]},{"level":3,"title":"Etag和If-None-Match","slug":"etag和if-none-match","link":"#etag和if-none-match","children":[]}]},{"level":2,"title":"强制缓存和协商缓存区别","slug":"强制缓存和协商缓存区别","link":"#强制缓存和协商缓存区别","children":[]},{"level":2,"title":"点击刷新按钮或者按F5、按Ctrl+F5、地址栏回车有什么区别","slug":"点击刷新按钮或者按f5、按ctrl-f5、地址栏回车有什么区别","link":"#点击刷新按钮或者按f5、按ctrl-f5、地址栏回车有什么区别","children":[]}],"git":{"createdTime":1733113665000,"updatedTime":1733113665000,"contributors":[{"name":"robot","email":"Yuchunmao1998123","commits":1}]},"readingTime":{"minutes":4.62,"words":1385},"filePathRelative":"developer/web/browser/浏览器缓存.md","localizedDate":"2024年12月2日","excerpt":"\\n<p>浏览器缓存是浏览器在本地磁盘对用户近期请求过的文档进行存储。在下一次访问同一文档时，就可以直接从本地磁盘中读取。</p>\\n<p>其主要过程为：</p>\\n<ol>\\n<li>浏览器第一次加载资源，服务器返回200，浏览器从服务器下载资源文件，并缓存资源以及response header（响应头信息），以供下次对比使用</li>\\n<li>浏览器再次请求资源，由于强制缓存优先级高，浏览器通过强制缓存判断缓存是否命中，命中则直接使用本地缓存。</li>\\n<li>强制缓存没有命中则开始判断协商缓存，浏览器会重新发服务器发起请求，携带上判断协商缓存需要的信息给服务器，服务器接收到信息，判断是否命中协商缓存。</li>\\n<li>命中协商缓存则返回状态码304，浏览器接收到则使用本地缓存。没有命中服务器直接发送新的资源文件给浏览器。</li>\\n</ol>","autoDesc":true}')}}]);